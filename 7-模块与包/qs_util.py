# 定义一个有参数的函数 接受两个参数(x, y 被称之为形参)，并返回两个参数的和
def add(x, y):
    result = x + y  # 整型和浮点型相加 触发了隐式转换
    return result


def my_print(data):
    print(f'您让我打印的数据是：{data}')


"""
如何测试自己的module？

定义一个代码，并且使用 内置变量 __name__

当我们右键运行此文件的时候 __name__的值 是__main__可以利用此规则 来测试当前的包

"""
if __name__ == '__main__':
    print(add(1, 2))

"""
如何控制 外部调用此包时候的*号用到哪些函数？
需要使用内部变量 __all__ 来声明此module 被引用的时候 * 对应的函数名字~

二次解释：也就是说默认 在外部使用 from 模块名 import *的时候 此模块所有函数都能用
但是如果我们的这个工具有些方法不想给别人用*的时候引用呢 就得用这个办法控制了哈，但是如果对方显式引用，那么还是能用滴~

"""
# 这样就只暴露了add
__all__ = ['add']