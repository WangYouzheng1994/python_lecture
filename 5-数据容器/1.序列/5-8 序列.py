# 序列的总结：
# 序列的特点是：连续，有序（保持插入顺序）、支持下标索引
# 序列的类型有：列表、元祖、字符串
# 列表：可修改、支持重复且有序
# 元祖：不可修改，支持重复且有序
# 字符串：
# 都支持多种数据类型的混合存储

# 序列类型的常见操作
# 1. 切片，从一个指定的序列中，取出一个子序列，切割出~ substr
# 语法： 序列[起始下标:结束下标:步长]  下标起始为0表示第一个
"""
起始下标 包含元素， 结束下标的元素不包含，步长为每次向后取数据的间隔
步长1 表示一个一个获取
步长2 表示跳过一个

步长附属表示为 反向取数据， 如果是反向获取 那么 起始下标和结束下标也要进行反向，即使用负数
起始和结束如果不写表示从头到尾

"""
mylist = [1, 3, 5, 7, 9, '11']
# list 操作 从第二个元素开始切分到第4个，步长1
# print(mylist[1:3])
# # tuple 从第二个元素开始切分到底4个，步长1
mytuple = (1, 3, 5, 7, 9, '11')
# print(mytuple[:]) # 完整截取 相当于复制一个新的

# # str 步长2截取
str = '1234567'
# print(str[::2])
# #######反向操作#####
# 1. str 切片 步长-1，相当于反转了因为他是从右到左获取的
# print(str[::-1])
# 2. list 从3 开始 到1 结束 步长-1
# print(str[3:1:-2])
# # 3. 元祖 tuple 从头到尾 步长-3
#
print(mytuple[::-3])